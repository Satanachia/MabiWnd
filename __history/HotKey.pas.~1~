unit HotKey;

interface

uses
  Windows, Classes, Vcl.Dialogs;

type
  THotkeyInfo = record
    Modifier: Word;
    VirtualKey: Word;
  end;

  THotkeyThread = class(TThread)
  private
    FHotkey: THotkeyInfo;
  protected
    procedure Execute; override;
  public
    constructor Create(Hotkey: THotkeyInfo);
  end;

  TMyThread = class(THotkeyThread)
  protected
    procedure Execute; override;
  end;

function CreateHotkeyThread(Hotkey: THotkeyInfo): TThread; stdcall;

implementation

constructor THotkeyThread.Create(Hotkey: THotkeyInfo);
begin
  inherited Create(False);
  FHotkey := Hotkey;
end;

procedure THotkeyThread.Execute;
begin
  if RegisterHotKey(0, 1, FHotkey.Modifier, FHotkey.VirtualKey) then
  begin
    while not Terminated do
    begin
      if WaitForSingleObject(Handle, 50) = WAIT_OBJECT_0 then
      begin
        // hotkey was pressed
        // do something here...
        ShowMessage('Hotkey Pressed!');
      end;
    end;
    UnregisterHotKey(0, 1);
  end;
end;

procedure TMyThread.Execute;
begin
  inherited;
  // do something here...
end;

function CreateHotkeyThread(Hotkey: THotkeyInfo): TThread; stdcall;
begin
  Result := TMyThread.Create(Hotkey);
end;

end.

