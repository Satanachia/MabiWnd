unit HotKey;

interface

uses
  System.Classes, Winapi.Windows;

type
  TKeyStateMonitor = class(TThread)
  private
    FKeyStates: array of SHORT;
    FKeyCodes: array of Byte;
    function AllKeysPressed: Boolean;
  protected
    procedure Execute; override;
  public
    constructor Create(const KeyCodes: array of Byte); reintroduce;
    property KeysPressed: Boolean read AllKeysPressed;
  end;

implementation

constructor TKeyStateMonitor.Create(const KeyCodes: array of Byte);
var
  I: Integer;
begin
  inherited Create(True);
  FreeOnTerminate := True;
  SetLength(FKeyStates, Length(KeyCodes));
  SetLength(FKeyCodes, Length(KeyCodes));
  for I := Low(KeyCodes) to High(KeyCodes) do
  begin
    FKeyCodes[I] := KeyCodes[I];
  end;
end;

function TKeyStateMonitor.AllKeysPressed: Boolean;
var
  I: Integer;
begin
  Result := True;
  for I := Low(FKeyStates) to High(FKeyStates) do
  begin
    if (FKeyStates[I] and $80) = 0 then
    begin
      Result := False;
      Break;
    end;
  end;
end;

procedure TKeyStateMonitor.Execute;
var
  I: Integer;
begin
  while not Terminated do
  begin
    for I := Low(FKeyCodes) to High(FKeyCodes) do
    begin
      FKeyStates[I] := GetKeyState(FKeyCodes[I]);
    end;
    Sleep(10);
  end;
end;

end.

